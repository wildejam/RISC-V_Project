/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_
 *  """""""""""""""""""""""""""""resources.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "config.hcodal"

#define BOOLEAN_BIT     1    // Boolean control bit of width 1-bit
#define TWO_BIT         2       // Two bit wide control signal


pipeline pipe
{
    IF, ID, EX, ME, WB
};

// -------------------------------------------------------------------------------------------------
// Fetch stage
// -------------------------------------------------------------------------------------------------

signal bit[ADDR_W] s_if_nextpc;
signal bit[INSTR_W] s_if_pcin;

// -------------------------------------------------------------------------------------------------
// Decode stage
// -------------------------------------------------------------------------------------------------

// Program Counter
register bit[ADDR_W] r_id_pc            { pipeline = pipe.ID; };
// Instruction -- Machine Code
signal bit[INSTR_W] s_id_instr;

// ALU Operation Control
signal bit[ALUOP_W] s_id_aluop;

//Control Signals
signal bit[REGWRITE_W] s_id_regwrite;
signal bit[SRC2_W] s_id_alusrc2;
signal bit[HALT_W] s_id_halt;

// RegFile Read Sources
signal bit[WORD_W] s_id_rs1;
signal bit[WORD_W] s_id_rs2;
signal bit[WORD_W] s_id_reg1;
signal bit[WORD_W] s_id_reg2;

// Signal for Destination register
signal bit[WORD_W] s_id_rd;

// Immediate Generator
signal bit[WORD_W] s_id_immed;
signal bit[WORD_W] s_id_immedi;
signal bit[WORD_W] s_id_immedb;
signal bit[WORD_W] s_id_immedu;
signal bit[WORD_W] s_id_immeds;
signal bit[WORD_W] s_id_immedj;
signal bit[WORD_W] s_id_immsel;


//Instruction opcode + func3 + func7
signal bit[OPC_W] s_id_opc;

// RFF select signals
signal bit[RFF1_W] s_rff1_sel;
signal bit[RFF2_W] s_rff2_sel;
// RFF selected value signals
signal bit[INSTR_W] s_id_val1;
signal bit[INSTR_W] s_id_val2;

// ALU src1 selector-pipes into r_ex_alusrc1
signal bit[SRC1_W] s_id_alusrc1;

// Branch operation
signal bit[BRANCH_W] s_id_branchop;
signal bit[BOOLEAN_BIT] s_id_brnch_sel;

// Register file write select value
signal bit[RFWT_W] s_id_rfwt_sel;

// Memory Operation
signal bit[MEMOP_W] s_id_memop;

// Load hazard indicator
signal bit[BOOLEAN_BIT] s_id_loadhaz;

// -------------------------------------------------------------------------------------------------
// Execute stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_ex_pc            		{ pipeline = pipe.EX; };
register bit[INSTR_W] r_ex_instr                { pipeline = pipe.EX; };
register bit[HALT_W] r_ex_halt            		{ pipeline = pipe.EX; };

// ALU Operation Control
register bit[ALUOP_W] r_ex_aluop        		{ pipeline = pipe.EX; };

// ALU Output & ALU src2 input signals
signal bit[WORD_W] s_ex_alu;
signal bit[WORD_W] s_ex_src2;

// ALU register 1 input
register bit[WORD_W] r_ex_reg1                  { pipeline = pipe.EX; };

// ALU src2 multiplexor
register bit[WORD_W] r_ex_alusrc2          { pipeline = pipe.EX; };
register bit[WORD_W] r_ex_reg2                  { pipeline = pipe.EX; };
register bit[WORD_W] r_ex_immed                 { pipeline = pipe.EX; };

// Destination register
register bit[WORD_W] r_ex_rd                    { pipeline = pipe.EX; };

// RegWrite
register bit[REGWRITE_W] r_ex_regwrite          { pipeline = pipe.EX; };

// RFF registers passed from ID
register bit[INSTR_W] r_ex_src1           { pipeline = pipe.EX; };
register bit[INSTR_W] r_ex_src2           { pipeline = pipe.EX; };

// fwdA and fwdB signals
signal bit[FWDA_W] s_ex_fwdA_sl;
signal bit[FWDB_W] s_ex_fwdB_sl;

// Forwarding Multiplexor output signals
signal bit[INSTR_W] s_ex_mplx1;
signal bit[INSTR_W] s_ex_mplx2;

// ALU src1 multiplexor
register bit[SRC1_W] r_ex_alusrc1       { pipeline = pipe.EX; };
signal bit[WORD_W] s_ex_src1;

// Branch operation
register bit[BRANCH_W] r_ex_branchop    { pipeline = pipe.EX; };
register bit[BOOLEAN_BIT] r_ex_brnch_sel { pipeline = pipe.EX; };

// ALU zero output
signal bit[BOOLEAN_BIT] s_ex_zero;

// Target address
signal bit[ADDR_W] s_ex_brimm;
signal bit[ADDR_W] s_ex_target_address;

// Register file write select value
register bit[RFWT_W] r_ex_rfwt_sel      { pipeline = pipe.EX; };

// Memop pipeline register
register bit[MEMOP_W] r_ex_memop        { pipeline = pipe.EX; };

// size of memory operation
signal bit[2] s_ex_memsize;

// carries encoded data from encode memory data function
signal bit[WORD_W] s_ex_encoded_data;

// parity bits & ecc syndrome for error correction instruction
signal bit[BOOLEAN_BIT] s_ex_p1;
signal bit[BOOLEAN_BIT] s_ex_p2;
signal bit[BOOLEAN_BIT] s_ex_p4;
signal bit[BOOLEAN_BIT] s_ex_p8;
signal bit[BOOLEAN_BIT] s_ex_p16;
signal bit[BOOLEAN_BIT] s_ex_p32;
signal bit[6] s_ex_ecc;

// -------------------------------------------------------------------------------------------------
// Memory stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_me_pc           			{ pipeline = pipe.ME; };
register bit[INSTR_W] r_me_instr                { pipeline = pipe.ME; };

// Pipelined alu result, destination register, and regwrite
register bit[WORD_W] r_me_alu                   { pipeline = pipe.ME; };
register bit[WORD_W] r_me_rd                    { pipeline = pipe.ME; };
register bit[REGWRITE_W] r_me_regwrite          { pipeline = pipe.ME; };

// Branch operation
register bit[BRANCH_W] r_me_branchop            { pipeline = pipe.ME; };

// ALU zero output
register bit[BOOLEAN_BIT] r_me_zero             { pipeline = pipe.ME; };

// Target Address
register bit[ADDR_W] r_me_target_address        { pipeline = pipe.ME; };

// Register file write select value
register bit[RFWT_W] r_me_rfwt_sel              { pipeline = pipe.ME; };

// pcsrc control bit
signal bit[BOOLEAN_BIT] s_me_pcsrc;

// Memop pipeline register
register bit[MEMOP_W] r_me_memop                { pipeline = pipe.ME; };

// size of memory operation
register bit[2] r_me_memsize                { pipeline = pipe.ME; };

// encoding/decoding data for memory instructions
register bit[WORD_W] r_me_encoded_data          { pipeline = pipe.ME; };
signal bit[WORD_W] s_me_decoded_data;
signal bit[WORD_W] s_me_mem_result;


// -------------------------------------------------------------------------------------------------
// Writeback stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_wb_pc            		{ pipeline = pipe.WB; };
register bit[INSTR_W] r_wb_instr                { pipeline = pipe.WB; };

// Pipelined alu result, destination register, and regwrite
register bit[WORD_W] r_wb_alu                   { pipeline = pipe.WB; };
register bit[WORD_W] r_wb_rd                    { pipeline = pipe.WB; };
register bit[REGWRITE_W] r_wb_regwrite          { pipeline = pipe.WB; };

// Register file write select value
register bit[RFWT_W] r_wb_rfwt_sel              { pipeline = pipe.WB; };

// Data which will be written to register file
signal bit[WORD_W] s_wb_result;

signal bit[WORD_W] s_wb_nextpc;

register bit[WORD_W] r_wb_mem_result            { pipeline = pipe.WB; };

// -------------------------------------------------------------------------------------------------
// Pipeline control
// -------------------------------------------------------------------------------------------------

signal   bit[1] s_if_stall;
signal   bit[1] s_id_stall;
signal   bit[1] s_id_clear;
register bit[1] r_id_clear                      {default = true;};
signal   bit[1] s_ex_stall;
signal   bit[1] s_ex_clear;
signal   bit[1] s_me_stall;
signal   bit[1] s_me_clear;
signal   bit[1] s_wb_stall;
signal   bit[1] s_wb_clear;

// used for memory stalls in id stage
register bit[1] r_id_stall                      { default = false; };
register bit[INSTR_W] r_id_instr_preserved;
register bit[WORD_W] r_id_pc_preserved;




// -------------------------------------------------------------------------------------------------
// SYSCALL support for simulation
// -------------------------------------------------------------------------------------------------
signal bit [BOOLEAN_BIT]            s_syscall_pending;
signal bit [BOOLEAN_BIT]            s_syscall_stall;
register bit [TWO_BIT]              r_syscall_delay         {default = 0;};

