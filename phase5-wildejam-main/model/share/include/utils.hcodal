/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file
 *  \author Codasip
 *  \date   15.04.2019
 *  \brief  utilities
 */

#ifndef UTILS_HCODAL_HG
#define UTILS_HCODAL_HG

#include "config.hcodal"

///////////////////////////////////////////////////////////////////////////////
//                       Define macro for register element
/////////////////////////////////////////////////////////////////////////////
// Using DEF_XPR macro to create the elements for each of the RISCV general purpose registers
#define DEF_XPR(index) \
        element x_##index\
        {\
            assembly {STRINGIZE(x##index)};\
            binary{index:bit[RF_XPR_W]};\
            return{index};\
        };\
        set xpr_general += x_##index ;


#define DEF_XPR_ALIAS_ONLY(addr, syntax, ext) \
        element x_##addr##_alias##ext : compiler_alias(x_##addr), assembler_alias(x_##addr) { \
            assembly { syntax }; \
            binary { addr:bit[5] }; \
            return { addr }; \
        }; \
        set xpr_general += x_##addr##_alias##ext;

#define DEF_REG_DOUBLE_ALIAS(addr, syntax1, syntax2) \
        DEF_XPR(addr) \
        DEF_XPR_ALIAS_ONLY(addr, syntax1, 0) \
        DEF_XPR_ALIAS_ONLY(addr, syntax2, 1)

// used to create common alias for the RISCV register file such as sp for stack pointer, ra for
// return address, tx for temporary register, etc.
#define DEF_REG_ALIAS(addr, syntax) \
        DEF_XPR(addr) \
        DEF_XPR_ALIAS_ONLY(addr, syntax, 0)


#if defined(OPTION_CSR_ENABLED)

/*
 * Define the macro to create the Control Status Registers (CSR) references and set of registers
 * that will be used to create the CSR assembly instructions
 */

#define DEF_REG_CSR(name, syntax, code) \
    element csr_##name { \
        assembly { syntax }; \
        binary { code:bit[12] }; \
        return { code }; \
    }; \
    set csr_regs += csr_##name;
#endif

#endif
