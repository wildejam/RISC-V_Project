/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file
 *  \author Codasip
 *  \date   15.04.2019
 *  \brief  main and reset events
 */

#include "config.hcodal"
#include "debug.hcodal"

// Events contain a semantics section where a C code is used to describe what happens when an event is activated.
// There are certain code limitations in the semantics section, i.e., ot all C language constructs are allowed - most
// notably pointers, typedefs, and structures.  Also note, that the C code follows an old ANSI C language standard.
// Therefore, all variables must be decared firs in a code block before an other statements

// The event main handles instruction fetching and starts instruction decoding.  Note that the code below mentions the
// set isa.  This set, which contains all supported instructions, will be described in model/share/include/opcodes.hcodal

// The reset event is activated in the first cycle

event reset
{
    semantics
    {
        dprintf("Cycle     PMA    |      Instruction                  | src reg 1 re"
            "ad         src reg2 read/load     dst reg write/store\n_________________|__"
            "_________________________________|____________________________________________________"
            "_____________________________");
    };
};

// The main event is activated every clock cycle

event main
{
    // The directive 'use' defines instances of other events and elements
    use isa;    // Instruction Set Architecture defined for the processor (RISC-V)

    // Define a local register to hold the instruction
    register bit[INSTR_W]   r_instruction_buffer;

    semantics
    {
        uint1 cache_resp;
        // Read an instruction from instruction memory
        // Obtain the instruction pointed by the Program Counter (PC)
#ifdef OPTION_CACHES_ENABLED
        r_instruction_buffer = idcache.if_icache.read(r_pc, INSTR_W/LAU_W, cache_resp, 0, CP_AHB_UNLOCK);     // Obtain the instruction pointed by the Program Counter (PC)
#else
        r_instruction_buffer = if_code.read(r_pc, INSTR_W/LAU_W, cache_resp,0, CP_AHB_UNLOCK);              // Obtain the instruction pointed by the Program Counter (PC)
#endif
        // Print the fetched instruction
        dprintf("\n%d:\t%08x | ",codasip_get_clock_cycle(), r_pc);
        codasip_disassembler(DEBUG_LEVEL, r_instruction_buffer, r_pc, "default", DEBUG_WRAPPING);
        dprintf("| ");

        // Increment the program counter
        r_pc += INSTR_SIZE;

        // The isa is a set of instructions and its arguments is a regster or memory cell that contains
        // the instruction to be executed.
        isa(r_instruction_buffer);
    };
};
